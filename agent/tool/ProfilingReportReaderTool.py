"""
Profiling Report Reader Tool for AutoGen Agents

This module provides a ProfilingReportReaderTool class that reads JSON profiling reports
generated by data profiling tools and returns them as strings for consumption by agents.

Features:
- Reads JSON profiling reports from file system
- Returns formatted JSON as string for agent consumption
- Validates file existence and JSON format
- Provides error handling for invalid files or formats
- Supports both absolute and relative file paths
"""

import json
import logging
from typing import Dict, Any
from pathlib import Path


class ProfilingReportReaderTool:
    """
    A tool for reading JSON profiling reports and converting them to strings.
    
    This class handles reading JSON files containing data profiling reports
    and returning them as formatted strings that can be consumed by agents.
    
    Attributes:
        reports_dir (Path): Default directory for reading reports
        logger (logging.Logger): Logger instance for the tool
    """
    
    def __init__(self, reports_dir: str = "ge_reports"):
        """
        Initialize the ProfilingReportReaderTool.
        
        Args:
            reports_dir (str): Default directory path for reading reports
        """
        # Set up logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # Set default reports directory
        self.reports_dir = Path(reports_dir)
        
        self.logger.info(f"ProfilingReportReaderTool initialized. Default reports directory: {self.reports_dir}")
    
    def read_json_report(self, file_path: str, pretty_print: bool = True) -> Dict[str, Any]:
        """
        Read a JSON profiling report and return it as a string.
        
        This method reads a JSON file containing a data profiling report and converts
        it to a string format that can be easily consumed by agents. It supports both
        absolute and relative file paths.
        
        Args:
            file_path (str): Path to the JSON report file (absolute or relative to reports_dir)
            pretty_print (bool): If True, format the JSON with indentation for readability
            
        Returns:
            Dict[str, Any]: Result containing the JSON content as string or error information
                - success (bool): Whether the operation succeeded
                - content (str): The JSON content as a formatted string (if success=True)
                - file_path (str): The path to the file that was read
                - error (str): Error message (if success=False)
        """
        try:
            # Convert to Path object
            path = Path(file_path)
            
            # If path is relative, try to resolve it relative to reports_dir
            if not path.is_absolute():
                path = self.reports_dir / path
            
            # Check if file exists
            if not path.exists():
                error_msg = f"File not found: {path}"
                self.logger.error(error_msg)
                return {
                    "success": False,
                    "error": error_msg,
                    "file_path": str(path)
                }
            
            # Check if it's a file (not a directory)
            if not path.is_file():
                error_msg = f"Path is not a file: {path}"
                self.logger.error(error_msg)
                return {
                    "success": False,
                    "error": error_msg,
                    "file_path": str(path)
                }
            
            # Read the JSON file
            self.logger.info(f"Reading JSON report from: {path}")
            with open(path, 'r', encoding='utf-8') as f:
                json_data = json.load(f)
            
            # Convert to string with optional pretty printing
            if pretty_print:
                json_string = json.dumps(json_data, indent=2, ensure_ascii=False)
            else:
                json_string = json.dumps(json_data, ensure_ascii=False)
            
            self.logger.info(f"Successfully read JSON report: {path} ({len(json_string)} characters)")
            
            return {
                "success": True,
                "content": json_string,
                "file_path": str(path),
                "size_bytes": len(json_string),
                "has_content": len(json_string) > 0
            }
            
        except json.JSONDecodeError as e:
            error_msg = f"Invalid JSON format in file {file_path}: {str(e)}"
            self.logger.error(error_msg)
            return {
                "success": False,
                "error": error_msg,
                "file_path": str(path) if 'path' in locals() else file_path
            }
        except Exception as e:
            error_msg = f"Failed to read JSON report: {str(e)}"
            self.logger.error(error_msg)
            return {
                "success": False,
                "error": error_msg,
                "file_path": str(path) if 'path' in locals() else file_path
            }
