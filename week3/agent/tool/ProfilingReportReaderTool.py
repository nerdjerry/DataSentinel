"""
Profiling Report Reader Tool for AutoGen Agents

This module provides a ProfilingReportReaderTool class that reads JSON profiling reports
generated by data profiling tools and returns them as strings for consumption by agents.

Features:
- Reads JSON profiling reports from file system
- Returns formatted JSON as string for agent consumption
- Validates file existence and JSON format
- Provides error handling for invalid files or formats
- Supports both absolute and relative file paths
"""

import json
import logging
from typing import Dict, Any
from pathlib import Path
import os


class ProfilingReportReaderTool:
    """
    A tool for reading JSON profiling reports and converting them to strings.
    
    This class handles reading JSON files containing data profiling reports
    and returning them as formatted strings that can be consumed by agents.
    
    Attributes:
        reports_dir (Path): Default directory for reading reports
        logger (logging.Logger): Logger instance for the tool
    """
    
    def __init__(self, reports_dir: str = "ge_reports"):
        """
        Initialize the ProfilingReportReaderTool.
        
        Args:
            reports_dir (str): Default directory path for reading reports
        """
        # TODO: Student implementation
        # 1. Set up logging:
        #    - Get LOG_LEVEL from environment variable (default to 'ERROR')
        #    - Convert to uppercase
        #    - Get numeric level using getattr(logging, log_level, logging.ERROR)
        #    - Configure basic logging with the numeric level
        #    - Create a logger instance using __name__
        
        # 2. Set default reports directory:
        #    - Convert reports_dir string to Path object
        #    - Store as self.reports_dir
        
        # 3. Log initialization message at INFO level
        
        raise NotImplementedError("Student must implement the __init__ method")
    
    def read_json_report(self, file_path: str, pretty_print: bool) -> Dict[str, Any]:
        """
        Read a JSON profiling report and return it as a string.
        
        This method reads a JSON file containing a data profiling report and converts
        it to a string format that can be easily consumed by agents. It supports both
        absolute and relative file paths.
        
        Args:
            file_path (str): Path to the JSON report file (absolute or relative to reports_dir)
            pretty_print (bool): If True, format the JSON with indentation for readability
            
        Returns:
            Dict[str, Any]: Result containing the JSON content as string or error information
            - success (bool): Whether the operation succeeded
            - content (str): The JSON content as a formatted string (if success=True)
            - file_path (str): The path to the file that was read
            - error (str): Error message (if success=False)
        """
        # TODO: Student implementation
        # 1. Convert file_path to Path object
        #    - Use Path(file_path)
        
        # 2. Handle relative vs absolute paths:
        #    - Check if path is absolute using path.is_absolute()
        #    - If not absolute:
        #      * Check if file_path already starts with reports_dir to avoid duplication
        #      * If not, append to self.reports_dir using self.reports_dir / path
        
        # 3. Validate the file:
        #    - Check if file exists using path.exists()
        #    - Check if it's a file (not directory) using path.is_file()
        #    - Return error dict if validation fails
        
        # 4. Read and parse JSON:
        #    - Open file with encoding='utf-8'
        #    - Use json.load() to parse the file
        #    - Handle json.JSONDecodeError exception
        
        # 5. Convert to string:
        #    - If pretty_print is True: use json.dumps with indent=2
        #    - Otherwise: use json.dumps without indentation
        #    - Set ensure_ascii=False for both cases
        
        # 6. Return success dictionary with:
        #    - success: True
        #    - content: The JSON string
        #    - file_path: String version of the path
        #    - size_bytes: Length of the JSON string
        #    - has_content: Boolean indicating if content is not empty
        
        # 7. Handle exceptions:
        #    - Catch json.JSONDecodeError separately for invalid JSON
        #    - Catch general Exception for other errors
        #    - Log errors using self.logger.error()
        #    - Return error dictionary with success=False and error message
        
        raise NotImplementedError("Student must implement the read_json_report method")
